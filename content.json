{"meta":{"title":"jianbang","subtitle":"写啊写，写到天荒地老","description":"技术、笔记","author":"健榜","url":"http://yoursite.com"},"pages":[{"title":"tags","date":"2018-05-07T18:04:13.000Z","updated":"2018-05-07T18:05:55.700Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-05-07T18:07:29.000Z","updated":"2018-05-07T18:07:29.220Z","comments":true,"path":"tags/index-1.html","permalink":"http://yoursite.com/tags/index-1.html","excerpt":"","text":""}],"posts":[{"title":"世界，你好！","slug":"the-first-article","date":"2018-05-07T18:15:33.000Z","updated":"2018-05-07T18:16:42.935Z","comments":true,"path":"2018/05/08/the-first-article/","link":"","permalink":"http://yoursite.com/2018/05/08/the-first-article/","excerpt":"","text":"1printf(&quot;Hello World&quot;);","categories":[],"tags":[{"name":"菜鸟","slug":"菜鸟","permalink":"http://yoursite.com/tags/菜鸟/"}]},{"title":"javaScript拾遗（一）","slug":"C语言学习笔记（四）","date":"2018-05-04T13:15:44.526Z","updated":"2018-05-08T13:48:03.817Z","comments":true,"path":"2018/05/04/C语言学习笔记（四）/","link":"","permalink":"http://yoursite.com/2018/05/04/C语言学习笔记（四）/","excerpt":"","text":"C语言学习笔记（四）1、C错误处理 C 语言不提供对错误处理的直接支持，但是作为一种系统编程语言，它以返回值的形式允许您访问底层数据。在发生错误时，大多数的 C 或 UNIX 函数调用返回 1 或 NULL，同时会设置一个错误代码 errno，该错误代码是全局变量，表示在函数调用期间发生了错误。您可以在 errno.h 头文件中找到各种各样的错误代码。 所以，C 程序员可以通过检查返回值，然后根据返回值决定采取哪种适当的动作。开发人员应该在程序初始化时，把 errno 设置为 0，这是一种良好的编程习惯。0 值表示程序中没有错误。 perroe(): 函数显示您传给它的字符串，后跟一个冒号、一个空格和当前 errno 值的文本表示形式。 strerror() 函数，返回一个指针，指针指向当前 errno 值的文本表示形式。 123456789101112131415161718192021222324#include &lt;stdio.h&gt;#include &lt;errno.h&gt;#include &lt;string.h&gt;extern int errno ;//系统宏定义有这个变量int main ()&#123; FILE * pf; int errnum; pf = fopen (&quot;unexist.txt&quot;, &quot;rb&quot;); if (pf == NULL) &#123; errnum = errno; fprintf(stderr, &quot;错误号: %d\\n&quot;, errno); perror(&quot;通过 perror 输出错误&quot;); fprintf(stderr, &quot;打开文件错误: %s\\n&quot;, strerror( errnum ));//stderr是系统提供的关于错误的文件流 &#125; else &#123; fclose (pf); &#125; return 0;&#125; 2、递归： 123456789101112//语法格式void recursion()&#123; statements; ... ... ... recursion(); /* 函数调用自身 */ ... ... ...&#125;int main()&#123; recursion();&#125; 举个栗子： 123456789101112131415161718192021222324#include &lt;stdio.h&gt; int fibonaci(int i)&#123; if(i == 0) &#123; return 0; &#125; if(i == 1) &#123; return 1; &#125; return fibonaci(i-1) + fibonaci(i-2);&#125; int main()&#123; int i; for (i = 0; i &lt; 10; i++) &#123; printf(&quot;%d\\t\\n&quot;, fibonaci(i)); &#125; return 0;&#125;//斐波那契数列 3、可变参数 引用头文件：stdarg.h 定义一个函数，最后一个参数为省略号，省略号前面可以设置自定义参数。 在函数定义中创建一个 va_list 类型变量，该类型是在 stdarg.h 头文件中定义的。 使用 int 参数和 va_start 宏来初始化 va_list 变量为一个参数列表。宏 va_start 是在 stdarg.h 头文件中定义 使用 va_arg 宏和 va_list 变量来访问参数列表中的每个项。 使用宏 va_end 来清理赋予 va_list 变量的内存。 1234567891011121314151617181920212223242526272829#include &lt;stdio.h&gt;#include &lt;stdarg.h&gt;double average(int num,...)&#123; va_list valist; double sum = 0.0; int i; /* 为 num 个参数初始化 valist */ va_start(valist, num); /* 访问所有赋给 valist 的参数 */ for (i = 0; i &lt; num; i++) &#123; sum += va_arg(valist, int); &#125; /* 清理为 valist 保留的内存 */ va_end(valist); return sum/num;&#125;int main()&#123; printf(&quot;Average of 2, 3, 4, 5 = %f\\n&quot;, average(4, 2,3,4,5)); printf(&quot;Average of 5, 10, 15 = %f\\n&quot;, average(3, 5,10,15));&#125; 4、内存管理管理内存的函数可以在&lt;stdlib.h&gt;头文件中找到 void calloc():在内存中动态地分配 num 个长度为 size 的连续空间，并将每一个字节都初始化为 0。所以它的结果是分配了 numsize 个字节长度的内存空间，并且每个字节的值都是0 void free(void *address):该函数释放 address 所指向的内存块,释放的是动态分配的内存空间。 void malloc(int num):在堆区分配一块指定大小的内存空间，用来存放数据。这块内存空间在函数执行完成后不会被初始化，它们的值是未知的。 void realloc(void address, int newsize):该函数重新分配内存，把内存扩展到 newsize。 123456789101112131415161718192021222324#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;int main()&#123; char name[100]; char *description; strcpy(name, &quot;Zara Ali&quot;); /* 动态分配内存 */ description = malloc( 200 * sizeof(char) ); if( description == NULL ) &#123; fprintf(stderr, &quot;Error - unable to allocate required memory\\n&quot;); &#125; else &#123; strcpy( description, &quot;Zara ali a DPS student in class 10th&quot;); &#125; printf(&quot;Name = %s\\n&quot;, name ); printf(&quot;Description: %s\\n&quot;, description );&#125;//动态分配内存 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;int main()&#123; char name[100]; char *description; strcpy(name, &quot;Zara Ali&quot;); /* 动态分配内存 */ description = malloc( 30 * sizeof(char) ); if( description == NULL ) &#123; fprintf(stderr, &quot;Error - unable to allocate required memory\\n&quot;); &#125; else &#123; strcpy( description, &quot;Zara ali a DPS student.&quot;); &#125; /* 假设您想要存储更大的描述信息 */ description = realloc( description, 100 * sizeof(char) ); if( description == NULL ) &#123; fprintf(stderr, &quot;Error - unable to allocate required memory\\n&quot;); &#125; else &#123; strcat( description, &quot;She is in class 10th&quot;); &#125; printf(&quot;Name = %s\\n&quot;, name ); printf(&quot;Description: %s\\n&quot;, description ); /* 使用 free() 函数释放内存 */ free(description);&#125;//重新调整内存的大小和释放内存，注意对比和动态分配内存操作进行对比 5、命令行参数int main(int argc, char *argv[]) argc：指传入参数的个数 argv[]:一个指针数组，指向传递给程序的每个参数。 argv[0]记录的参数是文件的名称","categories":[],"tags":[{"name":"C","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"}]},{"title":"javaScript拾遗（一）","slug":"C语言学习笔记（三）","date":"2018-05-04T11:38:57.514Z","updated":"2018-05-08T13:48:14.516Z","comments":true,"path":"2018/05/04/C语言学习笔记（三）/","link":"","permalink":"http://yoursite.com/2018/05/04/C语言学习笔记（三）/","excerpt":"","text":"C语言学习笔记（三）1、预处理器：C预处理器不是编译器的组成部分，但是它是编译过程的一个单独步骤，它就是一个文本的替换工具 2、常见的预处理符号 3、预定义的宏 4、预处理器运算符 字符串常量化运算符# 标记粘贴运算符## 1234567891011121314151617#include &lt;stdio.h&gt;#define message_for(a, b) \\ printf(#a &quot; and &quot; #b &quot;: We love you!\\n&quot;)//在变量a,b前面添加符号#表示这是个字符串常量int main(void)&#123; message_for(Carole, Debra); return 0;&#125;#include &lt;stdio.h&gt;#define tokenpaster(n) printf (&quot;token&quot; #n &quot; = %d&quot;, token##n)//在n的前面添加##符号，寓意将token和n联结成一个变量int main(void)&#123; int token34 = 40; tokenpaster(34);//输出token34 = 40 return 0;&#125; 5、defined()运算符用来确定一个标识符是否已经使用#defined定义过 123456789#include &lt;stdio.h&gt;#if !defined (MESSAGE) #define MESSAGE &quot;You wish!&quot;#endifint main(void)&#123; printf(&quot;Here is the message: %s\\n&quot;, MESSAGE); return 0;&#125; 6、参数化的宏使用这个功能来模拟函数 1234567#include &lt;stdio.h&gt;#define MAX(x,y) ((x) &gt; (y) ? (x) : (y))int main(void)&#123; printf(&quot;Max between 20 and 10 is %d\\n&quot;, MAX(10, 20)); return 0;&#125; 7、引用C语言头文件 只引用一次头文件 12345#ifndef HEADER_FILE#define HEADER_FILEthe entire header file file#endif//如果HEADER_FILE已经定义，则不会再次引用文件 有条件的引用 12345678#if SYSTEM_1 # include &quot;system_1.h&quot;#elif SYSTEM_2 # include &quot;system_2.h&quot;#elif SYSTEM_3 ...#endif//根据条件的判断结果来进行引用 8、类型转换 强制类型转换 常用的算数类型转换：隐式得把值强制转换为相同的类型，编译器首先会执行整数提升，如果操作数属性类型不同，则按照下列层次中出现的最高层次的类型","categories":[],"tags":[{"name":"C","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"}]},{"title":"C 语言学习笔记（二）","slug":"C语言学习笔记（二）","date":"2018-05-03T13:39:01.784Z","updated":"2018-05-04T12:42:56.569Z","comments":true,"path":"2018/05/03/C语言学习笔记（二）/","link":"","permalink":"http://yoursite.com/2018/05/03/C语言学习笔记（二）/","excerpt":"","text":"1、字符串，字符串实际上是使用null字符’\\0’终止的一维字符数组。 strcpy(s1,s2):复制字符串s2到字符串s1; strcat(s1, s2):链接字符串s2到字符串s1的末尾 strlen(s1):返回字符串s1的长度 strcmp(s1, s2):s1如果和s2相同则返回0，s1&lt;s2则返回小于零，其他的返回大于零 strchr(s1,ch):返回一个指针，指向s1中字符第一次出现的位置 strstr(s1, s2):返回一个指针，指向字符串s1中s2第二次出现的位置。 2、结构体 123456struct [struct tag] &#123; member definition; ... member definition;&#125;[one or more struct variables]; 3、位域 有些信息在存储时，并不需要占用一个完整的字节，而只需占几个或一个二进制位。例如在存放一个开关量时，只有 0 和 1 两种状态，用 1 位二进位即可。为了节省存储空间，并使处理简便，C 语言又提供了一种数据结构，称为”位域”或”位段”。所谓”位域”是把一个字节中的二进位划分为几个不同的区域，并说明每个区域的位数。每个域有一个域名，允许在程序中按域名进行操作。这样就可以把几个不同的对象用一个字节的二进制位域来表示 struct 位域结构名{ 位域列表};位域列表的形式为：类型说明符 位域名：位长度 12345struct bs&#123; int a:8; int b:2; int c:6;&#125;data; tips:一个位域必须存储在同一个字节当中，所以位域的长度不能超过8位 4、共用体union [union tag]{ member definition … member definition} [one or more union variables]; 共用体是一种特殊的数据类型，允许您在相同的内存位置存储不同的数据类型。您可以定义一个带有多成员的共用体，但是任何时候只能有一个成员带有值。共用体提供了一种使用相同的内存位置的有效方式.若同一时刻多个成员同时拥有值，将会出现意想不到的错误 5、typedef关键字：可以使用它来为类型取一个新的名字举个例子： 123456789101112131415161718192021222324typeof struct Books&#123; char title[50]; char author[50]; char subject[100]; int book_id;&#125; Book;//将struct Books取个新的名字为Bookint main( )&#123; Book book; strcpy( book.title, &quot;C 教程&quot;); strcpy( book.author, &quot;Runoob&quot;); strcpy( book.subject, &quot;编程语言&quot;); book.book_id = 12345; printf( &quot;书标题 : %s\\n&quot;, book.title); printf( &quot;书作者 : %s\\n&quot;, book.author); printf( &quot;书类目 : %s\\n&quot;, book.subject); printf( &quot;书 ID : %d\\n&quot;, book.book_id); return 0;&#125; 6、输入输出： 当我们谈论输入的时候，意味着要向程序填充一些数据。输入可以是以文件的形式或者从命令行中进行当我们谈论输出的时候，这意味着要在屏幕上、打印机上或任意文件中显示一些数据。 标准文件：C语言把所有的设备都当作文件。所以设备被处理的方式与文件相同。以下的三个文件（设备）会在程序执行的时候自动打开，以便访问键盘和屏幕 标准文件 文件指针 设备 标准输入 Stdin 键盘 标准输出 stdout 屏幕 标准错误 Stderr 您的屏幕 文件指针是访问文件的方式。 int getchar(void):从屏幕读取下一个可用的字符，并把它返回一个整数 int putchar(int c)：函数把字符输出到屏幕上，并返回相同的字符，这里的参数 c 是从上一个函数返回来的参数。 cahr gets(cahr s):函数从stdin读取一行到s所指向的缓冲区，直到一个终止符或者EOF int puts(char* s):把字符串s和一个尾随的换行符写入到stdout int scanf(const char* format …) int printf(const char* format …) 7、文件读写一个文件，无论它是文本文件还是二进制文件，都是代表了一系列的字节 FILE fopen(const char filename, const char* mode);//打开文件 int fclose(FILE* fp);//关闭文件 int fputc(int c, FILE* fp);//写入文件，把参数c的字符值写入到输出流中 int fputs(const char s, FILE fp)//把字符串s写入到fp指向的输出流中，输入成功返回一个非负值 int fgets(char buf, int n, FILE* fp);//从fp指向的输入流中读取n-1个字符，它会把读取到的字符串复制到缓冲区buff，并在最后一个追加null来终止字符串 int fscanf(FILE fp, const char format, ..);从文件中读取字符串，遇到空格会停止。 12345678910#include &lt;stdio.h&gt; int main()&#123; FILE *fp = NULL; fp = fopen(&quot;/tmp/test.txt&quot;, &quot;w+&quot;); fprintf(fp, &quot;This is testing for fprintf...\\n&quot;); fputs(&quot;This is testing for fputs...\\n&quot;, fp); fclose(fp);&#125; 1234567891011121314151617181920#include &lt;stdio.h&gt; int main()&#123; FILE *fp = NULL; char buff[255]; fp = fopen(&quot;/tmp/test.txt&quot;, &quot;r&quot;); fscanf(fp, &quot;%s&quot;, buff); printf(&quot;1: %s\\n&quot;, buff ); fgets(buff, 255, (FILE*)fp); printf(&quot;2: %s\\n&quot;, buff ); fgets(buff, 255, (FILE*)fp); printf(&quot;3: %s\\n&quot;, buff ); fclose(fp); &#125;","categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"C语言","slug":"C语言","permalink":"http://yoursite.com/tags/C语言/"}]},{"title":"javaScript拾遗（一）","slug":"C语言学习笔记（一）","date":"2018-05-02T08:28:39.551Z","updated":"2018-05-08T13:48:34.590Z","comments":true,"path":"2018/05/02/C语言学习笔记（一）/","link":"","permalink":"http://yoursite.com/2018/05/02/C语言学习笔记（一）/","excerpt":"","text":"1、C语言数据线类型 基本类型：是算术类型，包括整数类型和浮点数类型 枚举类型：也属于算数类型，被用来在程序中只能赋予一定的离散整数值的变量 void类型：类型说明符，表明没有可用的值 派生类型：指针类型，数组类型，结构类型，共用体类型和函数类型 2、C语言中的变量声明 一种是需要建立存储空间 另一种是不需要建立存储空间，通过使用extern关键字声明变量而不定义它，例如 extern int a;其中变量a可以在别的文件中定义。 3、C语言中的左值（lvalue）和 右值（rvalue） 左值：指向内存位置的表达式称为左值表达式，左值表达式可以出现在赋值号的右边和左边 右值：存储在内存中某些地址的数值。右值是不能对其进行赋值的表达式。 4、常量：常量是固定值，在程序执行期间不会改变，有叫做“字面量” 5、定义常量： #define type variable = value; const type variable = value;举例：#define char X = “x”; const String X = “hello World” 6、C存储类:定义C程序中变量和函数的范围（可见性）和声明周期 auto:是所有局部变量的默认存储类 register:用于定义存储在存储器中而不是RAM中的局部变量，被该类修饰的变量被访问的速度更加快速 static：指示编译器在程序的声明周期保持局部变量的存在，而不需要每次它进入或者离开作用域的时候进行销毁和创建，static是全局变量的默认存储类 extern:提供一个全局变量的引用 7、数组：type arrayName[arraySize] 多维数组：type name[size][size] 将数组作为参数：（ing *param）、（int param[10]）、(int param[]) 从函数中返回数组：C语言不允许返回一个完整的数组作为函数的参数，但是我们可以定义一个返回数组的引用，即返回类型为指针的函数。 1int* myFunction() &#123;&#125; tips:C不支持在函数外返回局部变量的的地址，除非局部变量被修饰为static变量 指向数组的指针：数组名是一个指向数组中第一个元素的常量指针。 8、C指针 每一个变量在内存中都有一个位置，每个位置又都定义了可以使用&amp;符号进行访问的地址，它表示的是内存中的一个地址。 指针是一个变量，其值为另一个变量的地址，即，内存中的直接位置 指针的数组：我们想让数组存储指向某种数据类型的指针 指针的指针：第一个指针包含了第二个指针的地址，第二个指针则指向了包含实际值的位置 可以将函数的参数设置为指针类型 9、函数指针：指向函数的指针变量 123456789101112131415 #include &quot;stdio.h&quot;int max(int x, int y) &#123; return x &gt; y ? x : y;&#125;int main(int argc, char const *argv[])&#123; //p 是函数指针 int (* p)(int, int) = &amp;max; int a, b, c, d; printf(&quot;请输入三个数字：\\n&quot;); scanf(&quot;%d %d %d&quot;, &amp;a, &amp;b, &amp;c); d = p(p(a,b), c); printf(&quot;最大的数字是 %d\\n&quot;, d); return 0;&#125; 1234567891011121314151617181920212223242526#include &quot;stdio.h&quot;#include &quot;stdlib.h&quot;//定义一个函数，参数列表中有函数指针void populate_array(int* array, size_t arraySize, int (*getNextValue)()) &#123; for (size_t i = 0; i &lt; arraySize; ++i) &#123; array[i] = getNextValue(); &#125;&#125;int getNextRandomValue(void)&#123; return rand();&#125;int main(int argc, char const *argv[])&#123; int myarray[10]; populate_array(myarray, 10, getNextRandomValue); for (int i = 0; i &lt; 10; ++i) &#123; printf(&quot;%d\\n&quot;, myarray[i]); &#125; printf(&quot;\\n&quot;); return 0;&#125;","categories":[],"tags":[{"name":"C","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"}]},{"title":"javaScript拾遗（一）","slug":"ECMAScript学习笔记（一）","date":"2018-05-01T02:03:52.247Z","updated":"2018-05-08T13:58:06.068Z","comments":true,"path":"2018/05/01/ECMAScript学习笔记（一）/","link":"","permalink":"http://yoursite.com/2018/05/01/ECMAScript学习笔记（一）/","excerpt":"","text":"ECMAScript学习笔记1、ES中的原始值和引用值：原始值：存在存在栈中，即直接存在变量访问的位置引用值：存储堆中的对象，即存储变量处的是一个指针，该指针指向存储对象的内村处。 2、原始类型：即 Undefined、Null、Boolean、Number 和 String；与之相对的是引用类型，常见的有对象。 3、类型转换：转换成字符串：toString()转换成数字：parseInt()、parseFloat()tips:从位置0开始查看每个字符，直到找到第一个非有效的数字为止，然后将前面的有效数字转换成整数 4、强制类型转换 Boolean(value):将value转换成布尔类型的值 Number(value):将value转换成数字 String(value):将value转换成字符串 5、String对象创建：var sOtringObject = new String(“hello World”);方法和属性： length charAt(),charCodeAt(); concat():调用这个方法后的原始对象值不变 indexOf()、lastIndexOf() localeCompare() slice()、substring() 6、instanceof（）：用于识别正在执行的对象的类型 7、delete运算符和void运算符前者删除前面定一个的属性或者方法后者对任何的值都是返回undefined 8、等性运算符：==、！= 如果符号的两侧是对象，则比较他们的引用值，若只想同一个对象，则返回true 8、全等号和非全等号：===、!===在比较值前不自动进行类型的转换，所以只有类型和引用值相同的时候才会返回true 9、for-in语句：用于枚举对象的属性 10、标签语句:主要是为了可以使后面可以通过调用label来调用语句label:statement 11、with语句：用户设置代码在特定对象中的作用域 1234var sMessage = &quot;hello&quot;;with(sMessage) &#123; alert(toUpperCase());&#125;//with语句用于字符串，所以在调用toUpperCase（）方法的时候，解释程序会先查找该方法是否为本地的函数，如果不是，它将查找伪对象sMessage,看它是否为该对象的方法。","categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"javaScript拾遗(二)","slug":"javaScript拾遗（二）-1","date":"2018-04-30T17:58:42.521Z","updated":"2018-05-01T17:26:47.250Z","comments":true,"path":"2018/05/01/javaScript拾遗（二）-1/","link":"","permalink":"http://yoursite.com/2018/05/01/javaScript拾遗（二）-1/","excerpt":"1、创建js对象 创建直接的实例 通过函数来创建person(firstname, lastname, age, eyecolor) &#123;1234567891011 this.firstname=firstname; this.lastname=lastname; this.age=age; this.eyecolor=eyecolor; function changeName(name) &#123; this.lastname = name; &#125; this.changeName = changeName;//方法也要在函数中声明和赋值&#125;//函数体//创建实例：var myFather = new person(&quot;Bill&quot;, &quot;Gates&quot;, 56, &quot;blue&quot;);","text":"1、创建js对象 创建直接的实例 通过函数来创建person(firstname, lastname, age, eyecolor) &#123;1234567891011 this.firstname=firstname; this.lastname=lastname; this.age=age; this.eyecolor=eyecolor; function changeName(name) &#123; this.lastname = name; &#125; this.changeName = changeName;//方法也要在函数中声明和赋值&#125;//函数体//创建实例：var myFather = new person(&quot;Bill&quot;, &quot;Gates&quot;, 56, &quot;blue&quot;); window2、- js的全局对象，函数以及变量均自动成为window的对象成员 全局变量是window对象的属性 全局函数是window对象的方法 3、查看浏览器窗口的尺寸：w 12345document.documentElement.clienWidth || document.body.clientWidth;var h=window.innerHeight|| document.documentElement.clientHeight|| document.body.clientHeight; 4、window.screen:包含有关用户的屏幕信息属性：screen.availWidth —- 可用的屏幕宽度screen.availHeight —- 可用的屏幕高度 5、window.Location:用户获取当前对象的URL,并把浏览器定向到新的页面属性：hostnamepathnameportprotocolhref:当前页面的整个URL方法：assign():加载新的文档，即可以打开新的页面 6、window.History:包含浏览器的浏览历史方法：back():返回前一个页面，和浏览器中后退的作用相同forward():前进到页面历史列表中的一个页面 7、window.navigator：包含有关访问者浏览器的信息 8、PopupAlert：js的消息框 警告框：alert(“文本”) 确认框：confirm(“文本”) 提示框：prompt(“文本”， “默认文本”) 9、Timing:js计时setTimeout(“js语句”，毫秒)：在一定的时间间隔之后执行js语句clearTimeout(setTimeout的返回值)：取消计时器","categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"javaScript拾遗（一）","slug":"javaScript拾遗(一)-1","date":"2018-04-30T08:35:32.969Z","updated":"2018-05-01T17:33:27.369Z","comments":true,"path":"2018/04/30/javaScript拾遗(一)-1/","link":"","permalink":"http://yoursite.com/2018/04/30/javaScript拾遗(一)-1/","excerpt":"","text":"1、变量 声明但是没有赋值的变量为：undefined 2、js的数据类型有： 字符串、数字、布尔、数组、对象、Null、Undefined 3、创建数组的方式： cars 123car[0] = &quot;Audi&quot;...var vars = new Array(&quot;Audi&quot;, &quot;BMW&quot;, &quot;Volvo&quot;); 4、null、undefined 可以通过将变量的值设置为null、undefined达到清空变量的目的。 5、函数： ” 是由事件驱动的或者当它被调用的时候执行的可重复使用的代码块“ functionName() &#123;123 .... return;&#125; 6、变量的生存周期： 局部变量：从声明开始，到函数体的结束 全部变量：从声明开始，到页面关闭 7、运算符号： ==和===的异同：前者只要求值相等，后者要求类型相同，值也要相等。 HTML DOM:document object model当页面被加载的时候dom模型将会被创建 通过可编程的对象模型，js可以创建动态的html 改变页面中所有HTML元素 改变页面中所有HTML属性 改变页面中所有CSS样式 对页面中所有的事件做出响应 8、改变HTML的内容：innerHTML属性document.getElementById(id).innerHTML=newValue; 9、改变HTML元素的属性id12&lt;script&gt;document.getElementById(&quot;image&quot;).src=&quot;landscape.jpg&quot;;&lt;/scritp&gt; 10、改变HTML样式：123```例如：```document.getElementById(&apos;ps2&apos;).style.color=&quot;red&quot;; 隐藏文本：123456789101112131415```显示文本则用visibility=visible;[Style对象的属性链接](http://www.w3school.com.cn/jsref/dom_obj_style.asp)-----------### HTML使js有能力对HTML事件做出反应&gt; onclick 当用户点击时触发事件&gt; onload/onunload 当用户进入或者离开页面时候触发的事件&gt; onchange 当内容改变的时候触发事件&gt; onmouseover/onmouseout 当鼠标移入/移出时候触发事件&gt; onmousedown/onmouseup 当点击下鼠标，触发onmousedown,放松鼠标，触发onmouseup,触发顺序：onmousedown-&gt;onmouseup-&gt;onclick10、通过HTML DOM向HTML元素分配事件```document.getElementById(&quot;myid&quot;).onclick=function()&#123;displayDate()&#125;; 11、添加节点 首先建一个新元素，然后在新元素中添加型内容（节点），最后再将创建好的元素连同创建好的节点（内容）添加到已经存在的元素中。 para1234var node=document.createTextNode(&quot;这是新段落。&quot;);//创建节点para.appendChild(node);//将节点添加到新创建的元素var element=document.getElementById(&quot;div1&quot;);element.appendChild(para); 12、删除已经存在的HTML元素：前提是需要知道目标元素的父元素child 1child.parentNode.removeChild(child); DOM教程","categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"html学习笔记(三)","slug":"html学习笔记(三)-1","date":"2018-04-29T15:51:15.553Z","updated":"2018-05-08T13:58:35.266Z","comments":true,"path":"2018/04/29/html学习笔记(三)-1/","link":"","permalink":"http://yoursite.com/2018/04/29/html学习笔记(三)-1/","excerpt":"","text":"input：输入 - text - password - submit - radio - checkbox - button tips:type=&quot;radio&quot;的input为单选按钮，若是佛那个多个选择中只能选一个，则多个input中必须要有相同的“name”属性值 checkbox为多选按钮，但也需要多个相同的&quot;name&quot;属性值 select：下拉列表name123 &lt;option value=&quot;Volvo&quot; selected&gt;Volvo&lt;/option&gt; ...&lt;/select&gt; selected值表示默认选中 textaarea:定义多行文本输入字段name12the cat ...&lt;/textarea&gt; button：定义可点击的按钮&lt;button type=&quot;button&quot; onclick=&quot;alert(&quot;Hello World!&quot;)&quot;&gt; Cick me!&lt;/button&gt;","categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"html","slug":"html","permalink":"http://yoursite.com/tags/html/"}]},{"title":"","slug":"html学习笔记二","date":"2018-04-28T16:58:14.874Z","updated":"2018-04-29T15:51:01.804Z","comments":true,"path":"2018/04/29/html学习笔记二/","link":"","permalink":"http://yoursite.com/2018/04/29/html学习笔记二/","excerpt":"","text":"html学习笔记颜色快速参考： w3school网站颜色速查","categories":[],"tags":[]},{"title":"html学习笔记(一)","slug":"html学习笔记一","date":"2018-04-28T12:26:00.454Z","updated":"2018-05-01T17:32:08.894Z","comments":true,"path":"2018/04/28/html学习笔记一/","link":"","permalink":"http://yoursite.com/2018/04/28/html学习笔记一/","excerpt":"","text":"将图片作为链接:href12&lt;img border=&quot;0&quot; src=&quot;/i/eg_buttonnext.gif&quot; /&gt;&lt;/a&gt; a标签的 target 属性：target=”_top”:在原窗口中打开链接；target=”_blank”：在新窗口中打开链接 排列图像：src12345678```ps:align还可以是：middle, top浮动图像：```&lt;p&gt;&lt;img src=&quot;#&quot; align=&quot;left&quot;&gt;带有图像的一个段落。图像的 align 属性设置为 &quot;left&quot;。图像将浮动到文本的左侧。&lt;/p&gt; align还可以取值：right,将图片浮动到文字的右边 创建图像的映射：src1234&lt;map name=&quot;planetmap&quot; id=&quot;planetmap&quot;&gt;&lt;area shape=&quot;circle&quot; coords=&quot;180,139,14&quot; href=&quot;#&quot; target=&quot;_blank&quot; alt=&quot;Venus&quot; /&gt;&lt;area shape=&quot;circle&quot; coodrs=&quot;129,161, 10&quot; href=&quot;#&quot; target=&quot;_blank&quot; alt=&quot;Mercury&quot;&gt;&lt;/map&gt; img元素中的usemap属性引用map元素的id或者name属性 表格：跨两列的单元表格：1234567891011&lt;table border=&quot;1&quot;&gt;&lt;tr&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th colspan=&quot;2&quot;&gt;电话&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td&gt;Bill Gates&lt;/td&gt; &lt;td&gt;555 77 854&lt;/td&gt; &lt;td&gt;555 77 855&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 跨两行的表格单元同理 单元表格的边距：cellpadding12345678910&lt;table border=&quot;1&quot; cellpadding=&quot;10&quot;&gt;&lt;tr&gt; &lt;td&gt;First&lt;/td&gt; &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Second&lt;/td&gt; &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 单元格的艰间距：cellspacing12345678910&lt;table border=&quot;1&quot; cellspacing=&quot;10&quot;&gt;&lt;tr&gt; &lt;td&gt;First&lt;/td&gt; &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Second&lt;/td&gt; &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 向表格添加背景颜色或者图像：1234567891011121314151617181920&lt;table border=&quot;1&quot; bgcolor=&quot;red&quot;&gt;&lt;tr&gt; &lt;td&gt;First&lt;/td&gt; &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Second&lt;/td&gt; &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;table border=&quot;1&quot; background=&quot;/i/eg_bg_07.gif&quot;&gt;&lt;tr&gt; &lt;td&gt;First&lt;/td&gt; &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Second&lt;/td&gt; &lt;td&gt;Row&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 表格单元的排列内容：1&lt;td algin=&quot;left&quot;&gt; 框架集：1234567&lt;html&gt;&lt;frameset cols=&quot;25%,50%,25%&quot;&gt; &lt;frame src=&quot;/example/html/frame_a.html&quot;&gt; &lt;frame src=&quot;/example/html/frame_b.html&quot;&gt; &lt;frame src=&quot;/example/html/frame_c.html&quot;&gt;&lt;/frameset&gt;&lt;/html&gt; frameset与body不能同数出现在一个页面中；cols的值分别表示内嵌的页面站的屏幕的比例 若客户的浏览器无法处理框架：添加noframe标签进行补救123456789&lt;frameset cols=&quot;25%,50%,25%&quot;&gt; &lt;frame src=&quot;/example/html/frame_a.html&quot;&gt; &lt;frame src=&quot;/example/html/frame_b.html&quot;&gt; &lt;frame src=&quot;/example/html/frame_c.html&quot;&gt;&lt;noframes&gt;&lt;body&gt;您的浏览器无法处理框架！&lt;/body&gt;&lt;/noframes&gt;&lt;/frameset&gt;&lt;/html&gt; tips:可以为frame标签添加:noresize=”noresize”使得内嵌页面的大小不可通过客户进行调整src123```内联框架：使用iframe作为链接的目标 W3School.com.cntips：由于链接的目标匹配 iframe 的名称，所以链接会在 iframe 中打开。12字符实体： 空格：&nbsp; 小于号：&lt; 大于号：&gt;`","categories":[],"tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://yoursite.com/tags/学习笔记/"},{"name":"html","slug":"html","permalink":"http://yoursite.com/tags/html/"}]}]}