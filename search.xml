<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>ID3算法实现</title>
      <link href="/2019/01/14/ID3%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/01/14/ID3%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p><img src="http://mrclown.cn/2019-01-13-1-table.png" width="" height=""></p>]]></content>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据挖掘 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决mysql乱码问题</title>
      <link href="/2018/06/13/%E8%A7%A3%E5%86%B3mysql%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2018/06/13/%E8%A7%A3%E5%86%B3mysql%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>默认情况下，在本地将中文插入mysql的时候,报如下的错误：<br><img src="http://mrclown.cn/屏幕快照 2018-06-13 上午10.20.34.png" alt="屏幕快照 2018-06-13 上午10.20.34"><br><a id="more"></a></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>1、进入到mysql的安装目录，找到my-default.cnf文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql/support-files</span><br></pre></td></tr></table></figure><p>2、将该文件复制到<code>/etc/</code>目录下，并命名为：my.cnf,此时该文件是只读模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ./my-default.cnf /etc/my.cnf</span><br></pre></td></tr></table></figure><p>3、修改<code>my.cnf</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 766 my.cnf</span><br><span class="line">vim my.cnf</span><br></pre></td></tr></table></figure><p>添加如下信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"> default-storage-engine=INNODB</span><br><span class="line"> character-set-server=utf8</span><br><span class="line"> collation-server=utf8_general_ci</span><br><span class="line">[client]</span><br><span class="line"> default-character-set=utf8</span><br></pre></td></tr></table></figure><p>定位到最后一行，将如下一句话注释掉<br><img src="http://mrclown.cn/屏幕快照 2018-06-13 上午10.41.33.png" alt="屏幕快照 2018-06-13 上午10.41.33"><br>网上的很多教程就是因为没有注释掉这一句话，所以才会导致最后的修改失败</p><p>4、最后将my.cnf文件修改为<code>只读</code>模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 744 my.cnf</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>1、登陆mysql,输入status<br><img src="http://mrclown.cn/屏幕快照 2018-06-13 上午10.22.02.png" alt="屏幕快照 2018-06-13 上午10.22.02"></p><p>2、创建数据库与数据表</p><p><img src="http://mrclown.cn/屏幕快照 2018-06-13 上午10.49.47.png" alt="屏幕快照 2018-06-13 上午10.49.47"></p><p>成功！！！</p>]]></content>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常用Git操作(一)</title>
      <link href="/2018/06/04/%E5%B8%B8%E7%94%A8Git%E6%93%8D%E4%BD%9C-%E4%B8%80/"/>
      <url>/2018/06/04/%E5%B8%B8%E7%94%A8Git%E6%93%8D%E4%BD%9C-%E4%B8%80/</url>
      <content type="html"><![CDATA[<h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add file-name</span><br></pre></td></tr></table></figure><p>ps:添加某个目录下所有文件：git add /path-name/*</p><h2 id="提交刚才添加的文件"><a href="#提交刚才添加的文件" class="headerlink" title="提交刚才添加的文件"></a>提交刚才添加的文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure><a id="more"></a><p>##查看版本库的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h2 id="查看最近两次修改之后文件的差异"><a href="#查看最近两次修改之后文件的差异" class="headerlink" title="查看最近两次修改之后文件的差异"></a>查看最近两次修改之后文件的差异</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff file-name</span><br></pre></td></tr></table></figure><h2 id="回滚到文件的某一个版本"><a href="#回滚到文件的某一个版本" class="headerlink" title="回滚到文件的某一个版本"></a>回滚到文件的某一个版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^ //表示回滚到上一次的版本</span><br><span class="line">git reset --hard commit_id //commit_id 是某次提交之后的commit_id值，可以通过git log/git reflog命令组合来查看并决定回到哪个版本</span><br></pre></td></tr></table></figure><p>ps:每一次commit都会形成一个commit_id,相当于为文件建立了一个快照</p><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p>分三种情况<br>1、只修改后没有add</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- filename//将工作区中的修改全部撤销</span><br></pre></td></tr></table></figure><p>2、修改之后add,即已经放到暂存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD filename //吧暂存区中的修改撤销掉，重新放回工作区</span><br></pre></td></tr></table></figure><p>3、修改之后且add、commit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^//直接选择回滚到上一版本</span><br></pre></td></tr></table></figure><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>分两种情况<br>1、确实想删掉文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm filename//从工作区删掉</span><br><span class="line">git rm filename//从版本库删掉</span><br></pre></td></tr></table></figure><p>2、发现自己删错了，则从暂存区还原</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- filename</span><br></pre></td></tr></table></figure><h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><p>在本地有一个库，在github上又有一个库，想让这两个库保持同步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//michaelliao换成自己的github账户</span><br><span class="line">//origin:远程库的名称</span><br><span class="line">//learngit.git是在github上建立的仓库</span><br><span class="line">git remote add origin git@github.com:michaelliao/learngit.git</span><br><span class="line">//把当前分支master推送到远程</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>ps:以上的命令行操作都是在本地创建的仓库工作区目录中执行的<br>    以后每次提交到远程就可以采取简化命令行操作<br>    git push origin master</p><h2 id="从远程克隆仓库"><a href="#从远程克隆仓库" class="headerlink" title="从远程克隆仓库"></a>从远程克隆仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone repositoryname</span><br></pre></td></tr></table></figure><h2 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//创建分支dev,并切换到dev分支</span><br><span class="line">git checkout -b dev</span><br><span class="line">//查看当前分支</span><br><span class="line">git branch</span><br><span class="line">/*在当前分支dev中完成文件的修改操作之后添加，提交*/</span><br><span class="line">//切换回master分支</span><br><span class="line">git checkout master</span><br><span class="line">//将dev分支合并到master分支</span><br><span class="line">git merge dev</span><br><span class="line">//这时候dev分支还在，我们可以选择将之保留或者删掉</span><br><span class="line">git branch -d dev//删掉分支</span><br></pre></td></tr></table></figure><h2 id="冲突的产生与消除"><a href="#冲突的产生与消除" class="headerlink" title="冲突的产生与消除"></a>冲突的产生与消除</h2><p>常见问题：<br>在新的分支feature上修改之后add,commit。然后切换回master分支修改相应文件，并add,commit。<br>接着试图将feature分支合并到mater分支，这时候会出错<br>解决方法：<br>手动修改产生冲突的文件，然后继续add,commit,最后合并分支</p><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><ul><li>github上有连个分支：master和dev分支。</li><li>从GitHub上克隆代码到本地，则本地有一个master分支，它与远程的master分支关联</li><li>创建远程origin的dev分支到本地的dev分支：git checkout -b dev origin/dev</li><li>然后就可以在本地的dev分支进行修改，并且推送到远程的origin/dev</li><li>如果另外一个人也用同样的方式将他dev的分支推送到远程的origin/dev分支，则可能会出现问题</li><li>现在本地执行:git pull</li><li>如果pull失败，则可能是由于本本地的dev没有和远程的origin/dev进行连接，执行：git branch –set-upstream-to=origin/dev dev</li><li>最后再:git pull</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//将本地的master分支的代码强行推送到远程的dev分支</span><br><span class="line">git push -fu origin master:dev</span><br></pre></td></tr></table></figure><h2 id="多说几句"><a href="#多说几句" class="headerlink" title="多说几句"></a>多说几句</h2><p>现在生活中用到的git指令不是很多，基本就是git clone，所以每次<br>需要用到一些其他的git指令，就得google.干脆，将git命令一次性<br>总结好，最好能记住并且会使用啦，但是忘记了的话，每次都来到这个网站<br>查找，想来也是比较方便的。</p><p>ps:<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">参考Git教程</a></p>]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> bbs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《UNIX环境高级编程》学习笔记：环境配置</title>
      <link href="/2018/05/17/%E3%80%8AUNIX%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/05/17/%E3%80%8AUNIX%E7%8E%AF%E5%A2%83%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>我的环境一开始是：<br>macOS 10.13.2,<br>gcc:7.1.0</p><h3 id="一、下载源码"><a href="#一、下载源码" class="headerlink" title="一、下载源码"></a>一、下载源码</h3><p><a href="www.apuebook,com">源码链接</a><br><a id="more"></a></p><h3 id="二、开始编译源码"><a href="#二、开始编译源码" class="headerlink" title="二、开始编译源码"></a>二、开始编译源码</h3><p>1、进入到apue.3e，输入：make<br>报错：</p><p><img src="http://mrclown.cn/15265697756775.jpg" alt=""></p><p>类似的语法错误，在某个地方需要“,”或者“；”，打开syslog.h文件，如下：</p><p><img src="http://mrclown.cn/15265699490886.jpg" alt=""></p><p>但是但是，这个文件并不能修改啊，而且是系统文件，没理由出现语法错误啊。<br>找了好久，发现这是编译器gcc的锅，这个bug已经被官方mark到网站上，<br><a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82787" target="_blank" rel="noopener">见链接</a><br>大概如下：<br><img src="http://mrclown.cn/15265702882497.jpg" alt=""><br>但是并没有提供解决办法。。。只能升级gcc版本，于是在terminal输入如下命令，升级到最新版本，我的是升级到8.1.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade gcc</span><br></pre></td></tr></table></figure><p>这时候再回到apue.3e目录下，输入如下命令（因为前面已经make锅一次，但是报错了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make clean</span><br></pre></td></tr></table></figure><p>然后再make一下，虽然会有些警告级别的错误，但。。。问题不大。</p><h3 id="三、将相关文件复制到相关目录下"><a href="#三、将相关文件复制到相关目录下" class="headerlink" title="三、将相关文件复制到相关目录下"></a>三、将相关文件复制到相关目录下</h3><p>回到apue.3e目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、sudo cp ./include/apue.h /usr/include/</span><br><span class="line">2、sudo cp ./lib/libapue.a /usr/local/lib/</span><br><span class="line">3、sudo cp ./lib/error.c /usr/include //似乎这个文件不用复制也行</span><br></pre></td></tr></table></figure><p>网上一般的教程，在这一步是没有报错的，但是但是，我们的系统时10.13.0以后的版本，貌似并不能直接将外部的文件随意复制到一些敏感的系统目录下，报错：<code>Operation not permitted</code><br><a href="https://blog.csdn.net/z82367825/article/details/55000615" target="_blank" rel="noopener">以下是解决办法(参考链接)</a><br>1、先记下(因为等下重启电脑你会忘掉)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csrutil disable</span><br></pre></td></tr></table></figure><p>2、重启电脑，重启的过程中一直按住 Command+R 键，打开终端，输入上述命令，即可<br>之后就可以执行复制文件的操作了</p><h3 id="四、编写书上的第一个文件，进行测试"><a href="#四、编写书上的第一个文件，进行测试" class="headerlink" title="四、编写书上的第一个文件，进行测试"></a>四、编写书上的第一个文件，进行测试</h3><p>大概如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;apue.h&quot;</span><br><span class="line">#include &quot;dirent.h&quot; </span><br><span class="line"></span><br><span class="line">int main(int argc, char const *argv[])</span><br><span class="line">&#123;</span><br><span class="line">DIR *dp;</span><br><span class="line">struct dirent *dirp;</span><br><span class="line"></span><br><span class="line">if(argc != 2) &#123;</span><br><span class="line">err_quit(&quot;usage: ls directory_name&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if((dp = opendir(argv[1])) == NULL) &#123;</span><br><span class="line">err_sys(&quot;can&apos;t open %s&quot;, argv[1]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while((dirp = readdir(dp)) != NULL) &#123;</span><br><span class="line">printf(&quot;%s\n&quot;, dirp-&gt;d_name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在终端编译（我的是直接在sublime一个窗口写代码，一个窗口开启终端）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc myls.c -o myls</span><br></pre></td></tr></table></figure><p>报错：<br><img src="http://mrclown.cn/15265718184761.jpg" alt=""><br>网上说活大概意思是缺少相关的库文件，咱们回到第三步，发现之前我们复制了一个名叫“libapue.a”的文件到/usr/local/lib目录下，看样子我们的代码需要这样的一个库文件<br>于是执行；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc myls.c -o myls -lapue</span><br></pre></td></tr></table></figure><p><img src="http://mrclown.cn/15265720407439.jpg" alt=""><br>嘿！没毛病。<br>在执行以下可执行文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myls ./usr</span><br></pre></td></tr></table></figure><p><img src="http://mrclown.cn/15265721311443.jpg" alt=""></p><p>其他：gcc的一些知识<br>1、gcc filename -o newfilename -lapue<br>-lapue的意思是链接阶段需要添加libapue这个库文件<br>然而，这个库文件在哪呢？gcc在预处理阶段寻找头文件默认扫描的目录是：/usr/include/ 而库文件则是放到/usr/lib/目录下，如果相应的库文件还是没找到，则继续在/usr/local/lib目录下寻找，刚才我们将libapue.a这个文件添加到了这个目录先就是出于这个目的。<br>2、gcc -E :预编译之后停止<br>3、gcc -c : 形成.o文件，为目标文件，在这一阶段并不需要到刚才我们额外添加的那个libapue库<br>4、gcc -S：形成.s的汇编源文件</p>]]></content>
      
      
        <tags>
            
            <tag> unix/linux </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小程序初体验(一)</title>
      <link href="/2018/05/16/2018-05-16/"/>
      <url>/2018/05/16/2018-05-16/</url>
      <content type="html"><![CDATA[<p>今年参加了“互联网+”的比赛，我们的产品是一款微信小程序，作为小组里唯一的一名“技术人员”，“开发小程序”的任务义不容辞。</p><p>此前我并没有接触写过一行关于小程序的代码，仅有一点html、css、js基础。而我接到的任务是要在三天之内做出一款“演示”作用的小程序，我们是创意组，并不需要成品，当然有成品那肯定是锦上添花的啦。</p><h2 id="查看官方的简易教程"><a href="#查看官方的简易教程" class="headerlink" title="查看官方的简易教程"></a>查看官方的简易教程</h2><p>一、申请开发者ID—&gt;下载开发IDE<br>开发者ID是自动生成的一长串的字符串，看起来似乎没有没什么规律。每一次新建项目都得输入ID，除非是新建体验版的项目，所以最好新建一个文本文档，将ID保存下来，免得每次都要去到微信小程序官方网站查看。链接：<a href="https://mp.weixin.qq.com/cgi-bin/wx" target="_blank" rel="noopener">微信公众平台</a><br><a id="more"></a><br><img src="http://mrclown.cn/15264817024027.jpg" alt="-w408"></p><p>IDE的界面如下：界面风格还是很简洁、利落的。主要由模拟器，编辑器，调试器三大部分构成。由于是国内自产的一款IDE，所以界面说明大部分是中文，很适合新手啊（说的就是我）。<br><img src="http://mrclown.cn/15264817627271.jpg" alt="-w1030"></p><p>二、输出“Hello World”<br>在新建项目那一步骤里，选择“普通快速快速启动模版”就会形成官方准备的Demo.根据官方的教程，简单总结一下。<br><img src="http://mrclown.cn/15264822189377.jpg" alt="-w1018"></p><p>模拟器展现线的就是Demo的效果：只有一个简单的页面（Index）,下面则输出“Hello world”<br>文件目录：<img src="http://mrclown.cn/15264823540783.jpg" alt="-w180"><br>app.js:是整个项目中的公共逻辑处理代码部分<br>app.json:是整个项目中的配置文件<br>app.wxss:是整个项目的样式文件，可以在子项目中的*.wxss文件中覆盖该文件的设置。<br>pages目录下有index,log文件夹，分别对应的是index,log这两个界面，在小程序中，一个界面的内容用一个文件包含，一个页面文件中的文件基本组成为：</p><ul><li>文件名.js,</li><li>文件名.json,</li><li>文件名.wxml，</li><li>文件名.wxss,<br>顾名思义，根据文件的后缀则就可以知道这四个文件分别对应的是：文件的逻辑处理部分，配置部分，页面部分，样式部分。</li></ul><p>三、文件中的内容<br>app.js:每次重新启动项目都会执行一遍app.js文件中的逻辑代码，Demo中的代码解释得很清楚，这里就不解释了。<br>app.json:<br><img src="http://mrclown.cn/15264831112298.jpg" alt=""><br>很重要，每增加一个界面都要在这个文件里面进行配置，Demo中有两个界面，index和logs。window则是在配置整个项目的页面中一些公共界面。<br>app.wxml,app.wxss则表示每个页面中的一些公共页面模块和样式，可以在每个页面中进行覆盖这些设置。</p><p>注意！！！<br>在每个界面中，.js和.wxml文件是必须的！</p><p>四、一个页面的执行过程<br>在每个页面文件中对对应的.js文件中，敲下“page”再回车，既可以生成页面在程序中运行时各个状态下对应的函数<br>Data: {}这个模块中存储的是这个界面对应的数据，所有需要传到.wxml文件中的变量，都需要在这个模块中进行声明。<br>onLoad: function(){}//页面加载时初始化工作<br>onReady: function(){}//页面触发后执行的操作<br>onHide: function(){}//页面隐藏时候触发的操作<br>另外还有一些会帮我们自动生成的一些函数，比如处理下拉时刷新的函数等等。<br>另外，我们还可以在这个文件中编写处理各种事件（逻辑）的函数，只需要事先在.wxml文件对应的元素中绑定好。<br>在这个文件中常用到：this.setData（）这个函数，直接对属性进行赋值时禁止的。</p><p>五、同是界面的开发，微信小程序并没有提供类似html那样种类繁多的标签，而是提供了一些组件，是一些已经封装了很多功能的框架组件<br>1、视图容器：<br>    —- view: 常用组件，相当于html中的<div>标签<br>    —- sroll-view可以滚动的视图区域组件<br>2、基础内容组件：<br>    —- icon:展示视图界面图标<br>    —- text：展示文本内容<br>    —- progress:信息进度条<br>3、表单组件：<br>    —- button<br>    —- form<br>    —- input<br>    —- checkbox<br>    —- radio<br>    —- picker<br>    —- picker-view<br>4、互动操作组件：<br>    —- action-sheet:从手机底部弹出的可以供用户选择的选项栏<br>    —- modal:弹出对话框和用户交互<br>    —- toast:弹出提示框，仅起到提示的作用。<br>5、页面导航组件<br>    —- navigator:类似于html中<code>&lt;a&gt;</code>标签，但是微信提供了几个常用的页面间跳转的API<br>    wx.navigateTo(OBJECT):保留当前页面。跳转到应用内的某个界面<br>    wx.redirectTo(OBJECT):关闭当前的页面，跳转到应用内的某个界面<br>    wx.navigateBa__ck()关闭当前页面，回退至前一页面<br>5、媒体组件，这个就和html中提供的媒体组件很相似了<br>    —- image<br>    —- audio<br>    —- video<br>    —- map<br>    —- canvas</div></p>]]></content>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
